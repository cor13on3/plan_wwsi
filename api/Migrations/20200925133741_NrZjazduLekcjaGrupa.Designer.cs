// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Test2.Data;

namespace Test2.Migrations
{
    [DbContext(typeof(PlanContext))]
    [Migration("20200925133741_NrZjazduLekcjaGrupa")]
    partial class NrZjazduLekcjaGrupa
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Test2.Models.Grupa", b =>
                {
                    b.Property<string>("NrGrupy")
                        .HasColumnType("text");

                    b.Property<short>("Semestr")
                        .HasColumnType("smallint");

                    b.Property<int>("Stopien")
                        .HasColumnType("integer");

                    b.Property<int>("Tryb")
                        .HasColumnType("integer");

                    b.HasKey("NrGrupy");

                    b.ToTable("Grupa");
                });

            modelBuilder.Entity("Test2.Models.GrupaZjazd", b =>
                {
                    b.Property<short>("NrZjazdu")
                        .HasColumnType("smallint");

                    b.Property<int>("IdZjazdu")
                        .HasColumnType("integer");

                    b.Property<string>("NrGrupy")
                        .HasColumnType("text");

                    b.HasKey("NrZjazdu", "IdZjazdu", "NrGrupy");

                    b.HasIndex("IdZjazdu");

                    b.HasIndex("NrGrupy");

                    b.ToTable("GrupaZjazd");
                });

            modelBuilder.Entity("Test2.Models.Lekcja", b =>
                {
                    b.Property<int>("IdLekcji")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan>("CzasDo")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("CzasOd")
                        .HasColumnType("interval");

                    b.Property<bool>("CzyOdpracowanie")
                        .HasColumnType("boolean");

                    b.Property<short>("IdPrzedmiotu")
                        .HasColumnType("smallint");

                    b.Property<int>("IdSali")
                        .HasColumnType("integer");

                    b.Property<int>("IdWykladowcy")
                        .HasColumnType("integer");

                    b.HasKey("IdLekcji");

                    b.HasIndex("IdPrzedmiotu");

                    b.HasIndex("IdSali");

                    b.HasIndex("IdWykladowcy");

                    b.ToTable("Lekcja");
                });

            modelBuilder.Entity("Test2.Models.LekcjaGrupa", b =>
                {
                    b.Property<int>("IdLekcji")
                        .HasColumnType("integer");

                    b.Property<string>("NrGrupy")
                        .HasColumnType("text");

                    b.Property<int>("NrZjazdu")
                        .HasColumnType("integer");

                    b.HasKey("IdLekcji", "NrGrupy");

                    b.HasIndex("NrGrupy");

                    b.ToTable("LekcjaGrupa");
                });

            modelBuilder.Entity("Test2.Models.Przedmiot", b =>
                {
                    b.Property<short>("IdPrzedmiotu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Forma")
                        .HasColumnType("integer");

                    b.Property<string>("Nazwa")
                        .HasColumnType("text");

                    b.HasKey("IdPrzedmiotu");

                    b.ToTable("Przedmiot");
                });

            modelBuilder.Entity("Test2.Models.Sala", b =>
                {
                    b.Property<int>("IdSali")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nazwa")
                        .HasColumnType("text");

                    b.Property<int>("Rodzaj")
                        .HasColumnType("integer");

                    b.HasKey("IdSali");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("Test2.Models.Specjalnosc", b =>
                {
                    b.Property<int>("IdSpecjalnosci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nazwa")
                        .HasColumnType("text");

                    b.HasKey("IdSpecjalnosci");

                    b.ToTable("Specjalnosc");
                });

            modelBuilder.Entity("Test2.Models.WyklSpec", b =>
                {
                    b.Property<int>("IdWykladowcy")
                        .HasColumnType("integer");

                    b.Property<int>("IdSpecjalnosci")
                        .HasColumnType("integer");

                    b.HasKey("IdWykladowcy", "IdSpecjalnosci");

                    b.HasIndex("IdSpecjalnosci");

                    b.ToTable("WyklSpec");
                });

            modelBuilder.Entity("Test2.Models.Wykladowca", b =>
                {
                    b.Property<int>("IdWykladowcy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Imie")
                        .HasColumnType("text");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("text");

                    b.Property<string>("Tytul")
                        .HasColumnType("text");

                    b.HasKey("IdWykladowcy");

                    b.ToTable("Wykladowca");
                });

            modelBuilder.Entity("Test2.Models.Zjazd", b =>
                {
                    b.Property<int>("IdZjazdu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DataDo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataOd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Semestr")
                        .HasColumnType("integer");

                    b.HasKey("IdZjazdu");

                    b.ToTable("Zjazd");
                });

            modelBuilder.Entity("Test2.Models.GrupaZjazd", b =>
                {
                    b.HasOne("Test2.Models.Zjazd", "Zjazd")
                        .WithMany("GrupaZjazdList")
                        .HasForeignKey("IdZjazdu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.Grupa", "Grupa")
                        .WithMany("GrupaZjazdList")
                        .HasForeignKey("NrGrupy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test2.Models.Lekcja", b =>
                {
                    b.HasOne("Test2.Models.Przedmiot", "Przedmiot")
                        .WithMany("LekcjaList")
                        .HasForeignKey("IdPrzedmiotu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.Sala", "Sala")
                        .WithMany("LekcjaList")
                        .HasForeignKey("IdSali")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.Wykladowca", "Wykladowca")
                        .WithMany("LekcjaList")
                        .HasForeignKey("IdWykladowcy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test2.Models.LekcjaGrupa", b =>
                {
                    b.HasOne("Test2.Models.Lekcja", "Lekcja")
                        .WithMany("LekcjaGrupaList")
                        .HasForeignKey("IdLekcji")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.Grupa", "Grupa")
                        .WithMany("LekcjaGrupaList")
                        .HasForeignKey("NrGrupy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test2.Models.WyklSpec", b =>
                {
                    b.HasOne("Test2.Models.Specjalnosc", "Specjalnosc")
                        .WithMany("WyklSpecList")
                        .HasForeignKey("IdSpecjalnosci")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.Wykladowca", "Wykladowca")
                        .WithMany("WyklSpecList")
                        .HasForeignKey("IdWykladowcy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
