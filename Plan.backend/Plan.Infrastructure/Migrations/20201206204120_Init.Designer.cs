// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Plan.Serwis.BazaDanych;

namespace Plan.Infrastructure.Migrations
{
    [DbContext(typeof(PlanContext))]
    [Migration("20201206204120_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Plan.Core.Entities.Grupa", b =>
                {
                    b.Property<string>("NrGrupy")
                        .HasColumnType("text");

                    b.Property<int>("Semestr")
                        .HasColumnType("integer");

                    b.Property<string>("StopienStudiow")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrybStudiow")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NrGrupy");

                    b.ToTable("Grupa");
                });

            modelBuilder.Entity("Plan.Core.Entities.GrupaZjazd", b =>
                {
                    b.Property<int>("IdZjazdu")
                        .HasColumnType("integer");

                    b.Property<string>("NrGrupy")
                        .HasColumnType("text");

                    b.Property<bool>("CzyOdpracowanie")
                        .HasColumnType("boolean");

                    b.Property<int>("NrZjazdu")
                        .HasColumnType("integer");

                    b.HasKey("IdZjazdu", "NrGrupy");

                    b.HasIndex("NrGrupy");

                    b.ToTable("GrupaZjazd");
                });

            modelBuilder.Entity("Plan.Core.Entities.Lekcja", b =>
                {
                    b.Property<int>("IdLekcji")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DzienTygodnia")
                        .HasColumnType("integer");

                    b.Property<string>("Forma")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GodzinaDo")
                        .HasColumnType("text");

                    b.Property<string>("GodzinaOd")
                        .HasColumnType("text");

                    b.Property<int>("IdPrzedmiotu")
                        .HasColumnType("integer");

                    b.Property<int>("IdSali")
                        .HasColumnType("integer");

                    b.Property<int>("IdWykladowcy")
                        .HasColumnType("integer");

                    b.HasKey("IdLekcji");

                    b.HasIndex("IdPrzedmiotu");

                    b.HasIndex("IdSali");

                    b.HasIndex("IdWykladowcy");

                    b.ToTable("Lekcja");
                });

            modelBuilder.Entity("Plan.Core.Entities.LekcjaGrupa", b =>
                {
                    b.Property<int>("IdLekcji")
                        .HasColumnType("integer");

                    b.Property<string>("NrGrupy")
                        .HasColumnType("text");

                    b.Property<int>("NrZjazdu")
                        .HasColumnType("integer");

                    b.Property<bool>("CzyOdpracowanie")
                        .HasColumnType("boolean");

                    b.HasKey("IdLekcji", "NrGrupy", "NrZjazdu");

                    b.HasIndex("NrGrupy");

                    b.ToTable("LekcjaGrupa");
                });

            modelBuilder.Entity("Plan.Core.Entities.Przedmiot", b =>
                {
                    b.Property<int>("IdPrzedmiotu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nazwa")
                        .HasColumnType("text");

                    b.HasKey("IdPrzedmiotu");

                    b.ToTable("Przedmiot");
                });

            modelBuilder.Entity("Plan.Core.Entities.Sala", b =>
                {
                    b.Property<int>("IdSali")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nazwa")
                        .HasColumnType("text");

                    b.Property<string>("Rodzaj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSali");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("Plan.Core.Entities.Specjalnosc", b =>
                {
                    b.Property<int>("IdSpecjalnosci")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nazwa")
                        .HasColumnType("text");

                    b.HasKey("IdSpecjalnosci");

                    b.ToTable("Specjalnosc");
                });

            modelBuilder.Entity("Plan.Core.Entities.Uzytkownik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Imie")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Plan.Core.Entities.Wykladowca", b =>
                {
                    b.Property<int>("IdWykladowcy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Imie")
                        .HasColumnType("text");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("text");

                    b.Property<string>("Tytul")
                        .HasColumnType("text");

                    b.HasKey("IdWykladowcy");

                    b.ToTable("Wykladowca");
                });

            modelBuilder.Entity("Plan.Core.Entities.WykladowcaSpecjalizacja", b =>
                {
                    b.Property<int>("IdWykladowcy")
                        .HasColumnType("integer");

                    b.Property<int>("IdSpecjalnosci")
                        .HasColumnType("integer");

                    b.HasKey("IdWykladowcy", "IdSpecjalnosci");

                    b.HasIndex("IdSpecjalnosci");

                    b.ToTable("WyklSpec");
                });

            modelBuilder.Entity("Plan.Core.Entities.Zjazd", b =>
                {
                    b.Property<int>("IdZjazdu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DataDo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataOd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RodzajSemestru")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdZjazdu");

                    b.ToTable("Zjazd");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Plan.Core.Entities.Uzytkownik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Plan.Core.Entities.Uzytkownik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plan.Core.Entities.Uzytkownik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Plan.Core.Entities.Uzytkownik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plan.Core.Entities.GrupaZjazd", b =>
                {
                    b.HasOne("Plan.Core.Entities.Zjazd", "Zjazd")
                        .WithMany("GrupaZjazdList")
                        .HasForeignKey("IdZjazdu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plan.Core.Entities.Grupa", "Grupa")
                        .WithMany("GrupaZjazdList")
                        .HasForeignKey("NrGrupy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plan.Core.Entities.Lekcja", b =>
                {
                    b.HasOne("Plan.Core.Entities.Przedmiot", "Przedmiot")
                        .WithMany("LekcjaList")
                        .HasForeignKey("IdPrzedmiotu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plan.Core.Entities.Sala", "Sala")
                        .WithMany("LekcjaList")
                        .HasForeignKey("IdSali")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plan.Core.Entities.Wykladowca", "Wykladowca")
                        .WithMany("LekcjaList")
                        .HasForeignKey("IdWykladowcy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plan.Core.Entities.LekcjaGrupa", b =>
                {
                    b.HasOne("Plan.Core.Entities.Lekcja", "Lekcja")
                        .WithMany("LekcjaGrupaList")
                        .HasForeignKey("IdLekcji")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plan.Core.Entities.Grupa", "Grupa")
                        .WithMany("LekcjaGrupaList")
                        .HasForeignKey("NrGrupy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plan.Core.Entities.WykladowcaSpecjalizacja", b =>
                {
                    b.HasOne("Plan.Core.Entities.Specjalnosc", "Specjalnosc")
                        .WithMany("WyklSpecList")
                        .HasForeignKey("IdSpecjalnosci")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plan.Core.Entities.Wykladowca", "Wykladowca")
                        .WithMany("WyklSpecList")
                        .HasForeignKey("IdWykladowcy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
